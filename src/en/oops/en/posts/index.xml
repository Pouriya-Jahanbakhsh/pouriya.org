<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CodeFather</title>
    <link>https://pouriya.org/en/posts/</link>
    <description>Recent content in Posts on CodeFather</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019 Â© Pouriya Jahanbakhsh</copyright>
    <lastBuildDate>Wed, 20 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pouriya.org/en/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Erlang behaviors in Python</title>
      <link>https://pouriya.org/en/posts/erlang-behaviors-in-python/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pouriya.org/en/posts/erlang-behaviors-in-python/</guid>
      <description>Since python is an OOP (Object Oriented Programming) language; As a Python programmer you often work with classes, objecst, inheritance, etc and they make sense to you. But what happens when you start coding in a pure functional programming language like Erlang? One important problem is that you don&amp;rsquo;t see class keyword or something like that to implement your own abstraction layers. So how do Erlangers separate generic parts of code from specefic parts?</description>
    </item>
    
  </channel>
</rss>